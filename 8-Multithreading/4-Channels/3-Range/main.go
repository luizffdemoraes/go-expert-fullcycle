package main

import (
	"fmt"
	"sync"
)

/**
üîç O que esse c√≥digo faz?
Este c√≥digo implementa um sistema de comunica√ß√£o concorrente entre duas goroutines usando canais (chan) 
e um WaitGroup (wg) para sincroniza√ß√£o.

1Ô∏è‚É£ A main goroutine cria um canal (ch)
Esse canal permite a comunica√ß√£o entre as goroutines publish e reader.

2Ô∏è‚É£ A fun√ß√£o publish(ch) √© iniciada em uma goroutine
Ela envia 10 n√∫meros (0 a 9) para o canal ch.
Ap√≥s isso, fecha o canal com close(ch), indicando que n√£o haver√° mais envios.

3Ô∏è‚É£ A fun√ß√£o reader(ch, &wg) √© iniciada em outra goroutine
Ela l√™ os valores do canal e imprime cada um.
A cada leitura, chama wg.Done() para indicar que um item foi processado.

4Ô∏è‚É£ A main goroutine aguarda (wg.Wait())

Ela espera at√© que todas as 10 chamadas de wg.Done() ocorram, garantindo que todas as mensagens foram processadas antes de encerrar o programa.
**/
// Thread 1
func main() {
	ch := make(chan int)
	wg := sync.WaitGroup{}
	wg.Add(10)

	go publish(ch)
	go reader(ch, &wg)

	wg.Wait()
}

func reader(ch chan int, wg *sync.WaitGroup) {
	for x := range ch {
		fmt.Printf("Received %d\n", x)
		wg.Done()
	}
}

func publish(ch chan int) {
	for i := 0; i < 10; i++ {
		ch <- i
	}
	close(ch)
}
